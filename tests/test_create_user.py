# tests/test_create_user.py
import unittest
from unittest.mock import patch, MagicMock
from create_user import create_or_get_user

class TestCreateUser(unittest.TestCase):

    @patch('create_user.supabase')  # Mock the supabase client
    def test_create_user(self, mock_supabase):
        """
        Test the creation of a new user when the phone number does not exist in the database.
        """
        # Simulate no user found (empty data from database query)
        mock_supabase.table.return_value.select.return_value.eq.return_value.execute.return_value.data = []

        # Simulate the UUID generated by the database
        mock_user_data = {'id': 'generated-uuid', 'phone_number': '+1234567890'}

        # Simulate the insert operation returning the created user
        mock_supabase.table.return_value.insert.return_value.execute.return_value.data = [mock_user_data]

        # Call the function
        result = create_or_get_user('+1234567890')

        # Assertions
        self.assertIsNotNone(result)
        self.assertEqual(result['phone_number'], '+1234567890')
        self.assertEqual(result['id'], 'generated-uuid')

    @patch('create_user.supabase')  # Mock the supabase client
    def test_get_existing_user(self, mock_supabase):
        """
        Test fetching an existing user when the phone number exists in the database.
        """
        # Simulate an existing user in the database
        mock_existing_user = {'id': 'existing-uuid', 'phone_number': '+1234567890'}
        mock_supabase.table.return_value.select.return_value.eq.return_value.execute.return_value.data = [mock_existing_user]

        # Call the function
        result = create_or_get_user('+1234567890')

        # Assertions
        self.assertIsNotNone(result)
        self.assertEqual(result['phone_number'], '+1234567890')
        self.assertEqual(result['id'], 'existing-uuid')


if __name__ == "__main__":
    unittest.main()
