# Buildspec runs in the build stage of your environment pipeline to generate the environment CloudFormation stack config.
version: 0.2
phases:
  install:
    runtime-versions:
      ruby: 3.2.0
      docker: 20
    commands:
      - echo "cd into $CODEBUILD_SRC_DIR"
      - cd $CODEBUILD_SRC_DIR
      # Download the copilot linux binary
      - wget -q https://ecs-cli-v2-release.s3.amazonaws.com/copilot-linux-v1.34.0
      - mv ./copilot-linux-v1.34.0 ./copilot-linux
      - chmod +x ./copilot-linux

  pre_build:
    commands:
      # Login to ECR
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
      # Get environment name from pipeline stage
      - env_name=$(echo $CODEBUILD_WEBHOOK_TRIGGER | cut -d '/' -f 2)
      - echo "Deploying to environment $env_name"
      # Setup multi-architecture builds without daemon restart
      - DOCKER_CLI_EXPERIMENTAL=enabled
      - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - DOCKER_BUILDKIT=1 docker build --platform=linux/arm64 .

  build:
    commands:
      - echo "Building Docker image..."
      # Build and push using standard Docker commands
      - docker build --platform=linux/arm64 -t ${APP_NAME}:${env_name} .
      - docker tag ${APP_NAME}:${env_name} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_NAME}:${env_name}
      - docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_NAME}:${env_name}

  post_build:
    commands:
      # Generate CloudFormation templates
      - export COLOR="false"
      - export CI="true"
      - pipeline=$(cat $CODEBUILD_SRC_DIR/copilot/pipelines/amastay-master/manifest.yml | ruby -ryaml -rjson -e 'puts JSON.pretty_generate(YAML.load(ARGF))')
      - stages=$(echo $pipeline | jq -r '.stages[].name')
      - >
        for env in $stages; do
          ./copilot-linux env package -n $env --output-dir './infrastructure' --upload-assets --force;
          if [ $? -ne 0 ]; then
            echo "Cloudformation stack and config files were not generated." 1>&2;
            exit 1;
          fi
        done;

      # Deploy the service
      - echo "Deploying service..."
      - ./copilot-linux svc deploy --name api --env ${env_name}

cache:
  paths:
    - /root/.docker
artifacts:
  files:
    - "infrastructure/*"
